<request-form>
    <show-edit :disabled="editDisabled"></show-edit>
    <el-select v-model="request.role_id" placeholder="请选择">
        <el-option
                v-for="role in roles"
                :key="role.role_id"
                :label="role.display_name"
                :value="String(role.role_id)">
        </el-option>
    </el-select>
</request-form>
<edit-form>
    <el-checkbox-group v-model="edit.permission_ids">
        <el-checkbox v-for="permission in permissions" :label="permission.permission_id"
                     :key="permission.permission_id" style="width: 40%; text-align: left"
                     :title="permission.display_name">
            @{{permission.handler}}
        </el-checkbox>
    </el-checkbox-group>
</edit-form>
<result-table>
    <result-index></result-index>
    <result-link prop="permission_id" href="/rbac/permission" width="50"></result-link>
    <result-column prop="handler" width="200"></result-column>
    <result-column prop="roles" width="300" v-slot="{row}">
        <el-button size="small" v-for="role in row.roles" :key="role.role_id" type="text"
                   @click.native="request.role_id = role.role_id" :disabled="request.role_id == role.role_id"
                   :title="role.role_name">
            @{{ role.display_name }}
        </el-button>
    </result-column>
    <result-column prop="display_name" label="显示名称" show-overflow-tooltip></result-column>
</result-table>

@section('script')
    <script>
        vm = new App({
            data: {
                request: {role_id: ''},
                response: [],

                roles: [],
                edit: {
                    role_id: '',
                    role_name: '',
                    permission_ids: []
                },
                permissions: [],
                label: {
                    permission_id: '权限id',
                    roles: '角色列表',
                },
            },
            mounted() {
                this.ajaxGet("roles", (res) => this.roles = res);
            },
            computed: {
                editDisabled() {
                    let excludes = ['guest', 'user'];
                    for (let i = 0; i < this.roles.length; i++) {
                        let role = this.roles[i];
                        if (role.role_id == this.request.role_id) {
                            return excludes.includes(role.role_name);
                        }
                    }
                    return false;
                }
            },
            methods: {
                show_edit() {
                    this.ajaxGet('granted', {role_id: this.request.role_id}, (res) => {
                        this.edit.permission_ids = res;
                        this.edit.role_id = this.request.role_id;

                        if (!this.permissions.length) {
                            this.ajaxGet("permissions", (res) => {
                                this.permissions = res;
                                this.editVisible = true;
                            });
                        } else {
                            this.editVisible = true;
                        }
                    })
                }
            }
        });
    </script>
@append
